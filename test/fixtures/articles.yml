# Read about fixtures at https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html

one:
  title: Ruby on Rails VS NodeJS – The Ultimate Framework Comparison
  body: Ruby on Rails (RoR) is an open-source web framework used for developing dynamic web applications and websites. The framework is created with the Ruby programming language and aims to simplify Ruby development. Ruby on Rails was founded in 2003 by David Heinemeier Hansson “for programmers and coders happiness.” Ruby on Rails simplifies and streamlines the web application development process. Meaning you start building web applications without requiring a lot of theoretical knowledge. Rails takes care of a lot of background details so that you focus on only developing your application. It provides default structures for web pages, databases, and web services. A simple way to understand the usefulness of Ruby on Rails is by comparing RoR with ready-to-use kits. Imagine you want to build a new cupboard for your house. You could get the raw materials like wood, create a design, take measurements, cut the wood, and hand-build each shelf of the cupboard. That is how you build a web app with Ruby. But there is a more straightforward, faster alternative – assemble-yourself kit or Ruby on Rails. The kit contains ready-made shelves and doors and hooks, and nails. You just have to follow the instructions in the guide and attach the parts correctly, and your cupboard is ready. Similarly, Ruby on Rails provides all the components to build a web application simply and efficiently. You only need to learn the necessary commands and concepts for building your web software. Thus, Ruby on Rails is technical enough to build complex, unique applications without worrying about the background processes. Ruby on Rails is a flexible web framework. Using Ruby on Rails, you develop a variety of websites and web applications such as eCommerce sites, web portal, single-page applications, progressive web apps, and more. Before we look in detail at what RoR is used for, let’s understand why Ruby on Rails was developed and what problems it solves. Ruby on Rails is designed to be a very opinionated framework. In short, RoR thinks there is a right way to do things and makes it the default. This way RoR developers by default are following the best development practices while coding. Thus, Ruby on Rails increases the developer’s productivity and also makes the whole web development process more fun. Imagine you built a date input text button for your app. If you want to use the same feature somewhere else in your web app, you might just duplicate it. But in software development, duplicating a code comes with a lot of problems. If you copy-paste a code, you may get unexpected errors, factoring issues, and logical contradictions. For this reason, RoR is designed on the DRY or Don’t Repeat Yourself principle. In short, DRY means that each entity in your code should have a single, unambiguous, and authoritative definition. If you make any changes in one entity, it is automatically synced to all the other connected entities. Ruby on Rails developers create small, specific functions that can be easily reused and extended throughout the codebase. You write code once and keep the code clean and modular. Reuse the code anywhere in your projects by calling the function wherever required. This prevents any logical errors.
#  RAILS_ENV=test rails db:fixtures:load
#  RAILS_ENV=test bin/rails console test
